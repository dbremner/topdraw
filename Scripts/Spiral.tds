// Black background and roundy lines
desktop.fillLayer(new Color("black"));
desktop.lineJoin = "round";

// Setup the randomization
var db = desktop.bounds;
var radiusRnd = new Randomizer(10, db.height / 4);
var percentRnd = new Randomizer;
var radiusIncRnd = new Randomizer(0.2, 0.8);
var variation = 0.2;
var count = 25 * compositor.screenCount;
var c = new Color;
c.a = 0.5;

for (var x = 0; x < count; ++x) {
	var pt = new Point(db.width * percentRnd.floatValue, 
		db.height * percentRnd.floatValue);
	
	desktop.strokeStyle = c.vary(0.1, 0.1, 0.2, 0);
	desktop.lineWidth = 1 + percentRnd.floatValue * 4;
	Spiral(pt, radiusRnd.intValue, radiusRnd.intValue, radiusIncRnd.floatValue);
}

// Add a motion blur for excitement
var f = new Filter("CIMotionBlur");
var angleRnd = new Randomizer(-1, 1);
f.setKeyValue("inputAngle", Math.PI * angleRnd.floatValue);
var blurRadiusRnd = new Randomizer(0, 20);
f.setKeyValue("inputRadius", blurRadiusRnd.intValue);
desktop.applyFilter(f);

function Spiral(pt, startR, endR, radiusInc) {
	var arcLength = Math.PI / startR;
	var arc = 0;
	var seg = new Point;
	
	// Normalize
	if (startR > endR) {
		var temp = startR;
		startR = endR;
		endR = temp;
	}

	var currentR = startR;

	desktop.beginPath();
	var startPt = new Point;
	startPt.x = pt.x + Math.cos(arc) * currentR;
	startPt.y = pt.y + Math.sin(arc) * currentR;
	desktop.moveTo(startPt);
	
	// Spiral into the center
	while (currentR < endR) {
		seg.x = pt.x + Math.cos(arc) * currentR;
		seg.y = pt.y + Math.sin(arc) * currentR;
		desktop.lineTo(seg);
		currentR += radiusInc;

		// Minimum length
		if (arcLength < 0.1)
			arcLength = 0.1;

		arc += arcLength;
		arcLength -= 0.001;
	}
	
	desktop.stroke();
}

